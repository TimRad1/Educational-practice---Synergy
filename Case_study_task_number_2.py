# Кейс-задача № 2
# Написать тестовую программу, которая демонстрирует работу методов базового и производного классов.

class Animal:
    """Базовый класс, описывающий животное"""

    def __init__(self, name: str):
        self.name = name

    def make_sound(self):
        print(f"{self.name} издает звук!")

    def move(self):
        print(f"{self.name} двигается")


class Dog(Animal):
    """Производный класс, описывающий собаку"""

    def __init__(self, name: str, breed: str):
        super().__init__(name)
        self.breed = breed

    # Переопределение метода базового класса
    def make_sound(self):
        print(f"{self.name} (порода {self.breed}) громко лает: Гав-гав!")

    # Новый метод производного класса
    def fetch(self, item: str):
        print(f"{self.name} принес(ла) {item}!")


class Bird(Animal):
    """Производный класс, описывающий птицу"""

    def __init__(self, name: str, wingspan: float):
        super().__init__(name)
        self.wingspan = wingspan

    # Переопределение метода базового класса
    def move(self):
        print(f"{self.name} летит, размах крыльев {self.wingspan} см")

    # Новый метод производного класса
    def build_nest(self):
        print(f"{self.name} строит гнездо")


# Демонстрация работы методов
if __name__ == "__main__":
    # Создаем экземпляры классов
    generic_animal = Animal("Неизвестное животное")
    my_dog = Dog("Бобик", "Дворняжка")
    my_bird = Bird("Кеша", 25.5)

    # Демонстрация методов базового класса
    print("=== Базовый класс Animal ===")
    generic_animal.make_sound()
    generic_animal.move()

    # Демонстрация методов производного класса Dog
    print("\n=== Производный класс Dog ===")
    my_dog.make_sound()  # Переопределенный метод
    my_dog.move()  # Унаследованный метод
    my_dog.fetch("мяч")  # Уникальный метод

    # Демонстрация методов производного класса Bird
    print("\n=== Производный класс Bird ===")
    my_bird.make_sound()  # Унаследованный метод
    my_bird.move()  # Переопределенный метод
    my_bird.build_nest()  # Уникальный метод

# Этот код демонстрирует:
# 1. Создание базового класса Animal с:
# Конструктором (__init__)
# Общими методами (make_sound, move)
# 2. Производные классы Dog и Bird, которые:
# Наследуют базовый класс
# Добавляют новые свойства (breed, wingspan)
# Переопределяют методы базового класса
# Добавляют уникальные методы (fetch, build_nest)
# 3. Примеры вызовов:
# Методов базового класса
# Переопределенных методов
# Унаследованных методов
# Уникальных методов производных классов

# Результат выполнения программы:
#
# === Базовый класс Animal ===
# Неизвестное животное издает звук!
# Неизвестное животное двигается
#
# === Производный класс Dog ===
# Бобик (порода Дворняжка) громко лает: Гав-гав!
# Бобик двигается
# Бобик принес(ла) мяч!
#
# === Производный класс Bird ===
# Кеша издает звук!
# Кеша летит, размах крыльев 25.5 см
# Кеша строит гнездо