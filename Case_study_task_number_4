1. Анализ рынка WEB-приложений

1.1. Категории WEB-приложений
| Тип          | Примеры              | Возможности                            | Использование в компании   |
|--------------|----------------------|----------------------------------------|----------------------------|
| CMS          | WordPress, Joomla    | Управление контентом, SEO, плагины     | Корпоративные сайты, блоги |
| CRM**        | Salesforce, HubSpot  | Управление клиентами, аналитика продаж | Отделы продаж и маркетинга |
| ERP**        | SAP, Odoo            | Учет, логистика, производство          | Крупные предприятия        |
| E-commerce   | Magento, Shopify     | Каталог товаров, корзина, оплата       | Интернет-магазины          |
| Task Managers| Trello, Asana        | Управление задачами, коллаборация      | Проектные команды          |

1.2. Критерии выбора
- Масштабируемость (облачные решения vs локальные).  
- Интеграция (API, поддержка сторонних сервисов).  
- Стоимость (open-source vs коробочные решения).  

2. Реализация WEB-приложения на Delphi 10.2 + IIS + MS SQL

2.1. Технологии
- Сервер: IIS с ISAPI-модулем.  
- БД: MS SQL Server.  
- Язык: Delphi (Object Pascal).  

2.2. Функционал
- Просмотр списка задач (`GET /tasks`).  
- Добавление задачи (`POST /addtask`).  

2.3. Код (основные части)
pascal
// Главный модуль Web-приложения
unit WebModuleUnit;

interface

uses
  System.SysUtils, System.Classes, Web.HTTPApp, FireDAC.Phys.MSSQL, FireDAC.Stan.Intf,
  FireDAC.Stan.Option, FireDAC.Stan.Error, FireDAC.UI.Intf, FireDAC.Stan.Def,
  FireDAC.Stan.Pool, FireDAC.Stan.Async, FireDAC.Phys, FireDAC.Phys.MSSQLDef,
  FireDAC.VCLUI.Wait, FireDAC.Stan.Param, FireDAC.DatS, FireDAC.DApt.Intf,
  FireDAC.DApt, Data.DB, FireDAC.Comp.DataSet, FireDAC.Comp.Client;

type
  TWebModule1 = class(TWebModule)
    FDConnection1: TFDConnection;
    FDQuery1: TFDQuery;
    procedure WebModule1DefaultHandlerAction(Sender: TObject;
      Request: TWebRequest; Response: TWebResponse; var Handled: Boolean);
    procedure WebModule1TasksAction(Sender: TObject; Request: TWebRequest;
      Response: TWebResponse; var Handled: Boolean);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  WebModule1: TWebModule1;

implementation

uses
  System.JSON;

{$R *.dfm}

procedure TWebModule1.WebModule1DefaultHandlerAction(Sender: TObject;
  Request: TWebRequest; Response: TWebResponse; var Handled: Boolean);
begin
  Response.Content := 'Welcome to Delphi WebApp!';
end;

procedure TWebModule1.WebModule1TasksAction(Sender: TObject;
  Request: TWebRequest; Response: TWebResponse; var Handled: Boolean);
var
  JSONArray: TJSONArray;
begin
  FDQuery1.SQL.Text := 'SELECT * FROM Tasks';
  FDQuery1.Open;
  JSONArray := TJSONArray.Create;
  try
    while not FDQuery1.Eof do
    begin
      JSONArray.AddElement(
        TJSONObject.Create
          .AddPair('id', TJSONNumber.Create(FDQuery1.FieldByName('Id').AsInteger))
          .AddPair('title', FDQuery1.FieldByName('Title').AsString)
      );
      FDQuery1.Next;
    end;
    Response.Content := JSONArray.ToString;
  finally
    JSONArray.Free;
  end;
end;

end.

2.4. SQL-скрипт для MS SQL**
sql
CREATE TABLE Tasks (
    Id INT PRIMARY KEY IDENTITY,
    Title NVARCHAR(100) NOT NULL,
    Description NVARCHAR(255),
    IsCompleted BIT DEFAULT 0
);

3. Развертывание
1. Скопировать .dll в IIS:  
   C:\inetpub\wwwroot\MyWebApp.dll

2. Настройте ISAPI в IIS**:  
xml
   <handlers>
       <add name="MyWebApp" path="*.dll" verb="*" modules="IsapiModule" scriptProcessor="C:\inetpub\wwwroot\MyWebApp.dll" />
   </handlers>

3. Проверка API:  
   - GET http://localhost/MyWebApp.dll/tasks` → список задач.  
